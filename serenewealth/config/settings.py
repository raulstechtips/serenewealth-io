"""
Django settings for serenewealth project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

APP_ENV = os.environ.get("APP_ENV", "dev")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")
if APP_ENV in ["prod", "stage"] and not SECRET_KEY:
    raise ValueError("SECRET_KEY must be set in production environment")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = APP_ENV not in ["prod", "stage"]

CORS_ORIGIN_ALLOW_ALL = False

if APP_ENV in ["dev", "test"]:
    CORS_ALLOWED_ORIGINS = (
        'http://localhost:8081',
        'http://localhost:8080',
    )
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8081',
        'http://localhost:8080',
    ]
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "config.middleware.health_check_middleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Add project-level templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

SQL_DATABASE = os.environ.get("SQL_DATABASE")
SQL_USER = os.environ.get("SQL_USER")
SQL_PASSWORD = os.environ.get("SQL_PASSWORD")
SQL_HOST = os.environ.get("SQL_HOST")

required_database = {
    "SQL_DATABASE": SQL_DATABASE,
    "SQL_USER": SQL_USER,
    "SQL_PASSWORD": SQL_PASSWORD,
    "SQL_HOST": SQL_HOST,
}

missing = [name for name, val in required_database.items() if not val]
if missing and APP_ENV in ["prod", "stage", "dev"]:
    raise ImproperlyConfigured(
        f"Missing required database settings: {', '.join(missing)}"
    )

if APP_ENV in ["prod", "stage", "dev"]:
    # Production database configuration optimized for RDS
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": SQL_DATABASE,
            "USER": SQL_USER,
            "PASSWORD": SQL_PASSWORD,
            "HOST": SQL_HOST,
            "PORT": "5432",
            "OPTIONS": {
                'connect_timeout': 10,
                'application_name': 'serenewealth',
            },
            # Connection pooling settings for RDS with 87 max connections
            'CONN_MAX_AGE': 600,  # 10 minutes - keeps connections alive to reduce overhead
            'CONN_HEALTH_CHECKS': True,  # Verify connections before use
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Rest Framework Settings - COMMENTED OUT FOR DRF REMOVAL
# REST_FRAMEWORK = {
#     # 'DEFAULT_AUTHENTICATION_CLASSES': (
#     #     'rest_framework.authentication.SessionAuthentication',
#     #     # 'api_auth.authentication.FirebaseAuthentication',
#     # ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
#         # 'rest_framework.permissions.IsAuthenticated',
#     ),
#     'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
# }

# API Documentation Settings - COMMENTED OUT FOR DRF REMOVAL
# SPECTACULAR_SETTINGS = {
#     'TITLE': 'Sigma Beta Rho Database API',
#     'DESCRIPTION': 'API for the Sigma Beta Rho Database',
#     'VERSION': '0.1.0',
#     'SERVE_INCLUDE_SCHEMA': False,
#     # OTHER SETTINGS
# }

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / "static_project",  # Project-level static files
]

# S3/MinIO Storage Configuration

# Required settings for both AWS S3 and MinIO
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME_STATIC = os.environ.get('AWS_STORAGE_BUCKET_NAME_STATIC')
AWS_STORAGE_BUCKET_NAME_MEDIA = os.environ.get('AWS_STORAGE_BUCKET_NAME_MEDIA')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL')
CLOUD_FRONT_URL = os.environ.get('CLOUD_FRONT_URL')


if APP_ENV == "prod":
    AWS_S3_VERIFY = True
    STATIC_URL = f"https://{CLOUD_FRONT_URL}/"
    MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME_MEDIA}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/"

if APP_ENV in ["stage", "dev"]:
    STATIC_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME_STATIC}/'
    MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME_MEDIA}/'

if APP_ENV == "prod":
    # In production, only require bucket names and region
    required_s3 = {
        "AWS_STORAGE_BUCKET_NAME_STATIC": AWS_STORAGE_BUCKET_NAME_STATIC,
        "AWS_STORAGE_BUCKET_NAME_MEDIA": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "AWS_S3_REGION_NAME": AWS_S3_REGION_NAME,
        "CLOUD_FRONT_URL": CLOUD_FRONT_URL,
    }
    missing = [name for name, val in required_s3.items() if not val]

    if missing:
        raise ImproperlyConfigured(
            f"Missing required S3/MinIO settings: {', '.join(missing)}"
        )

if APP_ENV in ["stage", "dev"]:
    # In production, only require bucket names and region
    required_s3 = {
        "AWS_STORAGE_BUCKET_NAME_STATIC": AWS_STORAGE_BUCKET_NAME_STATIC,
        "AWS_STORAGE_BUCKET_NAME_MEDIA": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "AWS_S3_REGION_NAME": AWS_S3_REGION_NAME,
        "AWS_S3_ENDPOINT_URL": AWS_S3_ENDPOINT_URL,
    }
    missing = [name for name, val in required_s3.items() if not val]

    if missing:
        raise ImproperlyConfigured(
            f"Missing required S3/MinIO settings: {', '.join(missing)}"
        )

# Use the modern STORAGES configuration for Django 4.2+
if APP_ENV in ["prod", "stage", "dev"]:
    # Base storage options without credentials
    storage_options = {
        "bucket_name": AWS_STORAGE_BUCKET_NAME_MEDIA,
        "region_name": AWS_S3_REGION_NAME,
        "file_overwrite": False,
        "object_parameters": {
            'CacheControl': 'max-age=86400',
        },
        "querystring_auth": True,  # Enable signed URLs for media
        "querystring_expire": 3600  # 1 hour,
    }
    
    static_storage_options = {
        "bucket_name": AWS_STORAGE_BUCKET_NAME_STATIC,
        "region_name": AWS_S3_REGION_NAME,
        "location": "static",
        "file_overwrite": True,
        "querystring_auth": False,  # No signed URLs for static files
        "custom_domain": CLOUD_FRONT_URL if APP_ENV == "prod" else None,
    }
    
    # Add dev-specific options BEFORE creating STORAGES
    if APP_ENV in ["stage", "dev"]:
        storage_options.update({
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
        })
        static_storage_options.update({
            "endpoint_url": AWS_S3_ENDPOINT_URL,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
        })
    
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": storage_options,
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": static_storage_options,
        },
    }
else:
    # Local storage configuration (testing)
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Custom User Model
# AUTH_USER_MODEL = 'sw_auth.User'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
